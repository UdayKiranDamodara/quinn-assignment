{"version":3,"sources":["components/Days.js","contexts/DateContext.js","components/Tile.js","components/Grid.js","App.js","index.js"],"names":["Days","className","DateContext","createContext","DateContextProvider","props","useState","Date","date","setDate","Provider","value","children","Tile","data","getDate","day","getDay","info","imageUrl","undefined","media","mediaurl","rating","ratingDisplay","temp","i","push","icon","faStar","size","style","color","legend","legendDisplay","typeofday","console","log","getMonth","src","map","item","Grid","startDate","useContext","displayArray","setDisplayArray","posts","useEffect","fetchData","token","fetch","method","headers","body","JSON","stringify","then","response","json","result","responseobjects","continuationToken","continuationtoken","preprocess","catch","error","length","datesArray","post","index","array","calendardatetime","split","slice","makeTiles","firstDay","getFullYear","lastDay","filter","val","prevState","App","today","String","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc261c58.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Days.css'\r\n\r\nconst Days = () => {\r\n    return(\r\n        <div className='days-container'>\r\n            <div className='days-item'>S</div>\r\n            <div className='days-item'>M</div>\r\n            <div className='days-item'>T</div>\r\n            <div className='days-item'>W</div>\r\n            <div className='days-item'>T</div>\r\n            <div className='days-item'>F</div>\r\n            <div className='days-item'>S</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Days","import React, { createContext, useState } from \"react\";\r\nimport { propTypes } from \"react-addons-css-transition-group\";\r\n\r\nexport const DateContext = createContext()\r\n\r\nconst DateContextProvider = (props) => {\r\n    const [date, setDate] = useState(new Date())\r\n\r\n    return(\r\n        <DateContext.Provider value={[date, setDate]}>\r\n            {props.children}\r\n        </DateContext.Provider>\r\n    )\r\n}\r\n\r\nexport default DateContextProvider","import React from 'react'\r\nimport './Tile.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { fas, faStar } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst Tile = ({data}) => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    const date = data.date.getDate()\r\n    const day = data.date.getDay()\r\n    const info = data.data[0]\r\n    const imageUrl = (info!==undefined) ? info.media[0].mediaurl : null\r\n    const rating = (info!==undefined) ? info.rating : null\r\n    const ratingDisplay = []\r\n    if (rating!==null) {\r\n        let temp=rating\r\n        for(var i=0;i<5;i++){\r\n            if(temp>0){\r\n                ratingDisplay.push(<FontAwesomeIcon icon={faStar} size='xs' className='star' style={{color: 'lightblue'}}/>)\r\n                temp--\r\n            }\r\n            else ratingDisplay.push(<FontAwesomeIcon icon={faStar} size='xs' className='star' style={{color: 'lightgray'}}/>)\r\n        }\r\n    }\r\n    const legend = {\r\n        'hair cut': 'Cu',\r\n        'protein treatment': 'Pr',\r\n        'hair color': 'HC',\r\n        'deep conditioning': 'DC',\r\n        'clarifying': 'C'\r\n    }\r\n    const legendDisplay = (info!==undefined) ? info.typeofday : null\r\n    console.log(info)\r\n    console.log(imageUrl)\r\n    console.log(rating)\r\n    \r\n    return(\r\n        <div className={(day===0)?'grid-item sunday' :'grid-item'}>\r\n            <div className='date'>{(date===1)?`${months[data.date.getMonth()]} ${date}` : date}</div>\r\n            {/* <FontAwesomeIcon icon={faStar} size='xs' className='star'/>\r\n            <FontAwesomeIcon icon={['fas', 'star']} size='xs'/> */}\r\n            <div className='rating'>{(rating!==null)? <div>{ratingDisplay}</div> : <h4/>}</div>\r\n            <div className='image'>{(imageUrl!==null)?<img className='image-item' src={imageUrl}></img> :<div className='image-height'/>}</div>\r\n            <div className='legend'>{(legendDisplay!==null)? legendDisplay.map((item)=><div className='legend-item'>{legend[item]}</div>) : <div/>}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile","import React, {useContext, useEffect, useState} from 'react'\r\nimport { DateContext } from \"../contexts/DateContext\";\r\nimport './Grid.css'\r\nimport Tile from \"./Tile\";\r\n\r\nconst Grid = (startDate) => {\r\n    const [date, setDate] = useContext(DateContext)\r\n    const [displayArray, setDisplayArray]=useState([])\r\n\r\n    // const [posts, setPosts] = useState([])\r\n    let posts = []\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    useEffect(()=>{\r\n        fetchData(null)\r\n    }, [])\r\n\r\n    const fetchData = (token) => {\r\n        console.log('fetching Data for token:', token)\r\n        fetch(\"https://devapi.quinn.care/graph\", {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                \"requestobjects\": [\r\n                  {\r\n                    \"posts\": {\r\n                      \"operationtype\": \"read\",        \r\n                      \"id\": {\r\n                        \"return\": true\r\n                      },\r\n                      \"userid\": {\r\n                          \"searchvalues\" : [\"41329663-5834-11eb-8e6e-3ca82abc3dd4\"],\r\n                        \"return\": true\r\n                      },\r\n                      \"iscalendarentry\": {\r\n                          \"searchvalues\" : [\"true\"],\r\n                        \"return\": true\r\n                      },        \r\n                      \"media\": {\r\n                        \"return\": true //contains image url\r\n                      },\r\n                      \"rating\": {\r\n                        \"return\": true\r\n                      },\r\n                      \"text\": {\r\n                        \"return\": true\r\n                      },\r\n                      \"privacy\": {\r\n                        \"searchvalues\": [\r\n                          18\r\n                        ],\r\n                        \"return\": true\r\n                      },\r\n                      \"typeofday\": {\r\n                        \"return\": true\r\n                      },\r\n              \r\n                      // Don't change anything above ^^\t\r\n                      //editable variables start below //\r\n              \r\n                      \"calendardatetime\": { // Date Time of a particular post\r\n                        \"return\": true  , // please note: there can be multiple posts on a single day\r\n                        \"sort\" : \"ascending\" // you can sort fetched dates by ascending/descending.\r\n                      },\r\n                      \"maxitemcount\": \"20\",   //you can ask between 1 to 50 posts (max) at a time.\r\n                      \"continuationtoken\": token //replace with the continuation token from response to get the next set\r\n                    }\r\n                  }\r\n                ]\r\n              }),\r\n            // redirect: 'follow'\r\n          })\r\n        .then(response => response.json())\r\n        .then(result => {\r\n            const temp = result.responseobjects[0].posts;\r\n            console.log('temp', temp)\r\n            const continuationToken = result.responseobjects[0].continuationtoken;\r\n            console.log('cont token: ', continuationToken)\r\n            // setPosts(prevState => {\r\n            //     return [...prevState, ...temp]\r\n            // })\r\n            posts = [...posts, ...temp]\r\n            if (continuationToken !== null) {\r\n                fetchData(continuationToken)\r\n            }\r\n            else {\r\n                preprocess()\r\n            }\r\n        })\r\n        .catch(error => console.log('error', error)); \r\n    }\r\n\r\n    const preprocess = () => {\r\n        console.log('in pre-process')\r\n        console.log('posts: ', posts)\r\n        const length = posts.length;\r\n        console.log('length: ', length)\r\n        const datesArray = posts.map((post, index)=>{\r\n            // console.log(post.calendardatetime)\r\n            const time = post.calendardatetime\r\n            const array = time.split('-')\r\n            array[2] = array[2].slice(0,2)\r\n            // console.log(array)\r\n            const date = new Date(array[0], array[1], array[2])\r\n            // console.log(date)\r\n            return date\r\n        })\r\n        console.log(datesArray)\r\n        makeTiles(datesArray)\r\n    }\r\n\r\n    const makeTiles = (datesArray) => {\r\n        const firstDay = new Date(datesArray[0].getFullYear(), datesArray[0].getMonth(), datesArray[0].getDate()-datesArray[0].getDay());\r\n        // const lastDay = new Date(datesArray[0].getFullYear(), datesArray[0].getMonth(), datesArray[0].getDate()-datesArray[0].getDay()+7);\r\n        const lastDay = new Date(datesArray[datesArray.length-1].getFullYear(), datesArray[datesArray.length-1].getMonth(), datesArray[datesArray.length-1].getDate()-datesArray[datesArray.length-1].getDay()+6);\r\n        console.log(firstDay)\r\n        console.log(lastDay)\r\n        for(var i=firstDay; i<=lastDay; i.setDate(i.getDate()+1)){\r\n            console.log(i)\r\n            // console.log(datesArray.map((item, index)=>{\r\n            //     // console.log('item date', item.getDate())\r\n            //     // console.log('i date: ', i.getDate())\r\n            //     // console.log('compare: ', item.getDate()===i.getDate())\r\n            //     return((item.getDate()===i.getDate())&&(item.getMonth()===i.getMonth())&&(item.getFullYear()===i.getFullYear())? index : false)\r\n            // }).filter(item=>item!==false))\r\n            const temp = datesArray\r\n                            .map((item, index)=>{\r\n                            return((item.getDate()===i.getDate())&&(item.getMonth()===i.getMonth())&&(item.getFullYear()===i.getFullYear())? index : false)\r\n                            })\r\n                            .filter(item=>item!==false)\r\n            const val= {\r\n                        date: new Date(i.getFullYear(), i.getMonth(), i.getDate()),\r\n                        data: temp.map((item)=>posts[item])\r\n                        }\r\n            console.log(val)\r\n            setDisplayArray(prevState => {\r\n                return( [...prevState, val])\r\n            })\r\n        }\r\n        console.log(displayArray)\r\n        // var boo = datesArray.filter((item)=>item===datesArray[1])\r\n        // console.log('bool: ', boo)\r\n        // console.log('datesArray[1]: ', datesArray[1])\r\n        // console.log('datesArray[2]: ', datesArray[2])\r\n        // console.log('==', datesArray[1]==datesArray[2])\r\n    }\r\n    \r\n    return(\r\n        <div className='grid-container'>\r\n            {/* <div className='grid-item sticky'>S</div>\r\n            <div className='grid-item sticky'>M</div>\r\n            <div className='grid-item sticky'>T</div>\r\n            <div className='grid-item sticky'>W</div>\r\n            <div className='grid-item sticky'>T</div>\r\n            <div className='grid-item sticky'>F</div>\r\n            <div className='grid-item sticky'>S</div> */}\r\n            {displayArray.map((item, index)=><Tile key={index} data={item} ></Tile>)}\r\n            {/* {displayArray.map((item, index)=><div key={index} className='grid-item'>In tile</div>)} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid","import InfiniteCalendar from 'react-infinite-calendar';\nimport 'react-infinite-calendar/styles.css'; \nimport './App.css';\n\nimport Days from \"./components/Days\";\nimport Header from \"./components/Header\";\nimport Grid from \"./components/Grid\";\n\nfunction App() {\n  const today = new Date();\n  var lastWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay()-14);\n  console.log(typeof(String(today)))\n  return (\n    <div className=\"App\">\n      {/* <h1>Today: {String(today)}</h1>\n      <h1>lastWeek: {String(lastWeek)}</h1> */}\n      {/* <Header></Header> */}\n      <Days></Days>\n      <Grid></Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport DateContextProvider from \"./contexts/DateContext\";\n\nReactDOM.render(\n  <DateContextProvider>\n    <App />\n  </DateContextProvider>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}